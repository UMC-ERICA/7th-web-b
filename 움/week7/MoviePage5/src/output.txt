파일 이름: ./apis/axiosInstance.js
import axios from 'axios';

// 기본 axios 인스턴스 설정
const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || "http://localhost:3000", // 환경 변수 사용
});

// 요청 인터셉터로 자동 인증 헤더 설정
api.interceptors.request.use(
  config => {
    const accessToken = localStorage.getItem('accessToken');
    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    }
    return config;
  },
  error => Promise.reject(error)
);

// 응답 인터셉터로 자동 토큰 재발급 처리
api.interceptors.response.use(
  response => response,
  async error => {
    const originalRequest = error.config;
    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const newAccessToken = await refreshAccessToken();
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
        return api(originalRequest);
      } catch (refreshError) {
        console.error('토큰 재발급 후 요청 실패:', refreshError);
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        window.location.href = '/login';
      }
    }
    return Promise.reject(error);
  }
);

export default api;

파일 이름: ./App.css

파일 이름: ./App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Navbar from './components/Navbar';
import Sidebar from './components/Sidebar';
import Home from './pages/Home';
import LoginPage from './pages/LoginPage';
import SignupPage from './pages/SignupPage';
import SearchPage from './pages/SearchPage';
import MoviesLayout from './components/MoviesLayout';
import NowPlaying from './pages/NowPlaying';
import Popular from './pages/Popular';
import TopRated from './pages/TopRated';
import Upcoming from './pages/Upcoming';
import MovieCategories from './components/MovieCategories';
import MovieDetail from './pages/MovieDetail'; // 영화 상세 페이지 컴포넌트 추가
import styled from 'styled-components';

const RootLayout = styled.div`
  display: flex;
  padding-top: 60px;
  width: 100vw;
  height: 100vh;
  box-sizing: border-box;
  overflow-x: hidden;
`;

const SidebarContainer = styled.div`
  width: 200px;
  height: calc(100vh - 60px);
  background-color: #222;
  position: fixed;
  top: 60px;
  left: 0;
  overflow-y:auto;
`;

const Content = styled.div`
  margin-left: 200px;
  width: calc(100% - 200px);
  padding: 1rem;
  overflow-x: hidden;
  overflow-y:auto;
`;

const App = () => (
  <Router>
    <Navbar />
    <RootLayout>
      <SidebarContainer>
        <Sidebar />
      </SidebarContainer>
      <Content>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/signup" element={<SignupPage />} />
          <Route path="/search" element={<SearchPage />} />
          <Route path="/movies" element={<MoviesLayout />}>
            <Route index element={<MovieCategories />} />
            <Route path="now-playing" element={<NowPlaying />} />
            <Route path="popular" element={<Popular />} />
            <Route path="top-rated" element={<TopRated />} />
            <Route path="upcoming" element={<Upcoming />} />
            <Route path=":movieId" element={<MovieDetail />} />
          </Route>
        </Routes>
      </Content>
    </RootLayout>
  </Router>
);

export default App;

파일 이름: ./assets/react.svg
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
파일 이름: ./components/MovieCard.jsx
import React from "react";
import { Link } from "react-router-dom";
import styled from "styled-components";

const Card = styled(Link)`
  background-color: rgba(51, 51, 51, 0);
  color: #fff;
  border-radius: 8px;
  overflow: hidden;
  width: 168px;
  text-decoration: none;
  margin: 8px;
  transition: transform 0.3s ease;
  &:hover {
    transform: scale(1.05);
  }
`;

const Poster = styled.img`
  width: 168px;
  height: 240px;
  object-fit: cover;
  border-radius: 8px;
`;

const MovieTitle = styled.h3`
  font-size: 1rem;
  margin: 0;
  margin-left: 8px;
`;

const ReleaseDate = styled.p`
  font-size: 0.8rem;
  color: #ccc;
  margin: 0;
  margin-left: 8px;
`;

const MovieCard = ({ id, title, releaseDate, posterPath }) => (
  <Card to={`/movies/${id}`}>
    <Poster src={`https://image.tmdb.org/t/p/w500${posterPath}`} alt={title} />
    <MovieTitle>{title}</MovieTitle>
    <ReleaseDate>{releaseDate}</ReleaseDate>
  </Card>
);

export default MovieCard;

파일 이름: ./components/MovieCardListSkeleton.jsx
import MovieCardSkeleton from "./MovieCardSkeleton"

const MovieCardListSkeleton = ({number}) => {
    return (
        new Array(number).fill(0).map((_, index) => (
            <MovieCardSkeleton key={index} />
        ))
    );
};

export default MovieCardListSkeleton;
파일 이름: ./components/MovieCardSkeleton.jsx
import * as S from './MovieCardSkeleton.style.js'

const MovieCardSkeleton = () => {
    return (
        <S.Container>
            <S.CardMain />
            <S.TextWrapper>
                <S.TitleBox />
                <S.DescriptionBox />
            </S.TextWrapper>
        </S.Container>
    );
};

export default MovieCardSkeleton;
파일 이름: ./components/MovieCardSkeleton.style.js
import styled, { keyframes } from "styled-components";

const skeleton = keyframes`
    0% {
        opacity: 1;
    }
    30% {
        opacity: 0.6;
    }
    50% {
        opacity: 0.2;
    }
    80% {
        opacity: 0.6;
    }
    100% {
        opacity: 1;
    }
`;

const Container = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
`;

const CardMain = styled.div`
  width: 168px;
  height: 240px;
  background: rgb(230, 230, 230);
  border-radius: 8px;
  overflow: hidden;
  animation: ${skeleton} 3s 1s infinte linear alternate;
`;

const TextWrapper = styled.div`
  width: 168px;
  height: 45px;
  display: flex;
  flex-direction: column;
  gap: 2px;
  margin-top: 5px;
`;
const TitleBox = styled.div`
  width: 168px;
  height: 24px;
  background: rgb(230, 230, 230);
  border-radius: 8px;
  animation: ${skeleton} 3s 1s infinte linear alternate;
`;
const DescriptionBox = styled.div`
  width: 168px;
  height: 20px;
  background: rgb(230, 230, 230);
  border-radius: 8px;
  animation: ${skeleton} 3s 1s infinte linear alternate;
`;

export { Container, CardMain, TextWrapper, TitleBox, DescriptionBox };

파일 이름: ./components/MovieCategories.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import styled from 'styled-components';

const CategoriesContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  padding: 1rem;
  justify-content: center;
`;

const CategoryBox = styled(Link)`
  width: 200px;
  height: 150px;
  background-color: #333;
  color: #fff;
  display: flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  border-radius: 8px;
  font-size: 1.2rem;
  transition: transform 0.3s ease, background-color 0.3s ease;

  &:hover {
    transform: scale(1.05);
    background-color: #555;
  }
`;

const MovieCategories = () => (
  <CategoriesContainer>
    <CategoryBox to="/movies/now-playing">현재 상영중인</CategoryBox>
    <CategoryBox to="/movies/popular">인기있는</CategoryBox>
    <CategoryBox to="/movies/top-rated">높은 평가를 받은</CategoryBox>
    <CategoryBox to="/movies/upcoming">개봉 예정중인</CategoryBox>
  </CategoriesContainer>
);

export default MovieCategories;

파일 이름: ./components/MovieListPage.jsx
import React from 'react';
import MovieCard from './MovieCard';
import styled from 'styled-components';

const MovieGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(168px, 1fr));
  gap: 20px;
  padding: 1rem;
  width: 100%; // MovieGrid가 부모 요소 너비를 꽉 채우도록 설정
  box-sizing: border-box;
`;

const MovieListPage = ({ title, movies }) => (
    <div style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        width: '100%',
    }}>
    <h2>{title}</h2>
    <MovieGrid>
      {movies.map(movie => (
        <MovieCard
            key={movie.id}
            id={movie.id}
            title={movie.title}
            releaseDate={movie.release_date}
            posterPath={movie.poster_path}
        />
      ))}
    </MovieGrid>
  </div>
);

export default MovieListPage;

파일 이름: ./components/MoviesLayout.jsx
import React from 'react';
import { Outlet } from 'react-router-dom';

const MoviesLayout = () => (
  <div>
    <h2>영화 페이지</h2>
    <Outlet /> {/* 하위 라우트가 이 위치에 렌더링됩니다 */}
  </div>
);

export default MoviesLayout;

파일 이름: ./components/Navbar.jsx
import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import styled from 'styled-components';
import { fetchUserInfo } from '../services/authService';

const NavbarContainer = styled.nav`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.5rem 1rem;
  background-color: #333;
  height: 50px;
  width: 100%;
  position: fixed;
  top: 0;
  z-index: 1000;
`;

const Logo = styled(Link)`
  color: #ff007f;
  font-size: 1.5rem;
  text-decoration: none;
  padding: 0.5rem;
  transition: transform 0.3s ease;
  &:hover {
    transform: scale(1.1);
    color: #ff007f;
  }
`;

const ButtonContainer = styled.div`
  display: flex;
  gap: 0.5rem;
  margin-right: 2rem;
`;

const LoginButton = styled(Link)`
  color: #fff;
  padding: 0.3rem 0.7rem;
  background-color: #333;
  text-decoration: none;
  border-radius: 4px;
  transition: transform 0.3s ease;
  &:hover {
    transform: scale(1.1);
    color: #fff;
    background-color: #666a73;
  }
`;

const SignupButton = styled(Link)`
  color: #fff;
  padding: 0.3rem 0.7rem;
  background-color: #ff007f;
  text-decoration: none;
  border-radius: 4px;
  transition: transform 0.3s ease;
  &:hover {
    transform: scale(1.1);
    color: #fff;
    background-color: #bf3471;
  }
`;

// 추가된 LogoutButton 스타일 정의
const LogoutButton = styled.button`
  color: #fff;
  padding: 0.3rem 0.7rem;
  background-color: #333;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: transform 0.3s ease;
  &:hover {
    transform: scale(1.1);
    background-color: #666a73;
  }
`;

const Navbar = () => {
  const [userName, setUserName] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const loadUserInfo = async () => {
      try {
        const userInfo = await fetchUserInfo();
        setUserName(userInfo.email.split('@')[0]); // 이메일의 @ 앞 부분을 이름으로 사용
      } catch (error) {
        console.error('유저 정보 로드 실패:', error);
      }
    };
    loadUserInfo();
  }, []);

  const handleLogout = () => {
    // 로컬 스토리지에서 토큰 삭제
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    setUserName(''); // 로그인 상태를 초기화
    navigate('/login'); // 로그인 페이지로 이동
  };

  return (
    <NavbarContainer>
      <Logo to="/">YONGCHA</Logo>
      <ButtonContainer>
        {userName ? (
          <>
            <span>{userName}님 반갑습니다.</span>
            <LogoutButton onClick={handleLogout}>로그아웃</LogoutButton>
          </>
        ) : (
          <>
            <LoginButton to="/login">로그인</LoginButton>
            <SignupButton to="/signup">회원가입</SignupButton>
          </>
        )}
      </ButtonContainer>
    </NavbarContainer>
  );
};

export default Navbar;

파일 이름: ./components/Sidebar.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { FaFilm, FaSearch } from 'react-icons/fa';
import styled from 'styled-components';

const SidebarContainer = styled.div`
  padding: 1.5rem;
`;

const SidebarLink = styled(Link)`
  display: flex;
  align-items: center;
  color: #fff;
  padding: 0.5rem;
  text-decoration: none;
  transition: transform 0.3s ease;
  &:hover {
    transform: scale(1.1);
    color: #fff;
  }
`;

const Sidebar = () => (
  <SidebarContainer>
    <SidebarLink to="/search">
      <FaSearch style={{ marginRight: '0.5rem' }} /> 찾기
    </SidebarLink>
    <SidebarLink to="/movies">
      <FaFilm style={{ marginRight: '0.5rem' }} /> 영화
    </SidebarLink>
  </SidebarContainer>
);

export default Sidebar;

파일 이름: ./hooks/useCustomFetch.js
import { useEffect, useState } from "react";
import api from "../apis/axiosInstance";

const useCustomFetch = (url) => {
    const [data, setData] = useState([]); // 필요에 따라 {}로 초기값 설정 가능
    const [isLoading, setIsLoading] = useState(false);
    const [isError, setIsError] = useState(false);

    useEffect(() => {
        const fetchData = async () => {
            setIsLoading(true);
            try {
                const response = await api.get(url); // api.get(url)로 변경
                console.log(response.data, 'API 응답 데이터'); // API 응답 데이터 확인
                setData(response.data.results || []);
            } catch (error) {
                console.error('데이터 가져오기 실패:', error);
                setIsError(true);
            } finally {
                setIsLoading(false);
            }
        };
        fetchData();
    }, [url]);

    return { data, isLoading, isError };
};

export default useCustomFetch;

파일 이름: ./hooks/useFetchMovies.js
// useFetchMovies.js
import { useEffect, useState } from 'react';
import axios from 'axios';

const useFetchMovies = (endpoint) => {
  const [movies, setMovies] = useState([]);

  useEffect(() => {
    const fetchMovies = async () => {
      try {
        const response = await axios.get(`https://api.themoviedb.org/3/movie/${endpoint}`, {
          params: { api_key: 'de78f3589204f34063fb666ed535b7ca', language: 'ko-KR' },
        });
        console.log("Fetched movies:", response.data.results); // 데이터 확인
        setMovies(response.data.results);
      } catch (error) {
        console.error("Error fetching movies:", error);
      }
    };

    fetchMovies();
  }, [endpoint]);

  return movies;
};

export default useFetchMovies;



// import { useEffect, useState } from 'react';
// import axios from 'axios';

// const useFetchMovies = (endpoint) => {
//   const [movies, setMovies] = useState([]);

//   useEffect(() => {
//     axios
//       .get(`https://api.themoviedb.org/3/movie/${endpoint}`, {
//         params: { api_key: 'de78f3589204f34063fb666ed535b7ca', language: 'ko-KR' },
//       })
//       .then(response => setMovies(response.data.results))
//       .catch(error => console.error(error));
//   }, [endpoint]);

//   return movies;
// };

// export default useFetchMovies;

파일 이름: ./hooks/useForm.js
import { useEffect } from "react";
import {useState} from "react";

function useForm({initialValue, validate}) {
    const [values, setValues] = useState(initialValue)
    const [touched, setTouched] = useState()
    const [errors, setErrors] = useState()

    const handleChangeInput = (name, value) => {
        setValues({
            ...values,
            [name]: value
        });
    }

    const handleBlur = (name) => {
        setTouched({
            ...touched,
            [name]: true
        })
    }

    const getTextInputProps = (name) => {
        const value = values[name];
        const onChange = (event) => handleChangeInput(name, event.target.value);
        const onBlur = () => handleBlur(name);

        return {value, onChange, onBlur}
    }

    useEffect(() => {
        const newErrors = validate(values);
        console.log(newErrors);
        setErrors(newErrors);
    }, [validate, values]);

    return {values, errors, touched, getTextInputProps}
}

export default useForm
파일 이름: ./index.css
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
/* a:hover {
  color: #535bf2;
} */

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  /* border-radius: 8px; */
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

파일 이름: ./main.jsx
import { createRoot } from 'react-dom/client'
import App from './App.jsx'
import './index.css'

createRoot(document.getElementById('root')).render(
    <App />
);

파일 이름: ./pages/Home.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import MovieListPage from '../components/MovieListPage';

const Home = () => {
    const [movies, setMovies] = useState([]);

    useEffect(() => {
        axios
            .get('https://api.themoviedb.org/3/movie/now_playing', {
                params: { api_key: 'de78f3589204f34063fb666ed535b7ca', language: 'ko-KR' },
            })
            .then(response => setMovies(response.data.results))
            .catch(error => console.error(error));
    }, []);

    return <MovieListPage movies={movies} />;
};

export default Home;
파일 이름: ./pages/LoginPage.jsx
import React, { useState } from 'react';
import styled from 'styled-components';
import axios from 'axios';

const LoginContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 50px;
`;

const Input = styled.input`
  width: 300px;
  padding: 10px;
  margin: 10px 0;
  border: 1px solid ${props => props.$error ? 'red' : '#ccc'};
  border-radius: 5px;
`;

const ErrorMessage = styled.div`
  color: red;
  font-size: 0.8rem;
  margin-bottom: 5px;
`;

const LoginButton = styled.button`
  width: 300px;
  padding: 10px;
  background-color: ${props => props.disabled ? 'gray' : '#ff007f'};
  color: white;
  border: none;
  border-radius: 5px;
  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};
`;

const LoginPage = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [touched, setTouched] = useState({ email: false, password: false });

  const handleEmailChange = (e) => {
    const value = e.target.value;
    setEmail(value);
    if (!/\S+@\S+\.\S+/.test(value)) {
      setEmailError('올바른 이메일 형식이 아닙니다.');
    } else {
      setEmailError('');
    }
  };

  const handlePasswordChange = (e) => {
    const value = e.target.value;
    setPassword(value);
    if (value.length < 8 || value.length > 16) {
      setPasswordError('비밀번호는 8자 이상 16자 이하여야 합니다.');
    } else {
      setPasswordError('');
    }
  };

  const handleBlur = (field) => {
    setTouched({ ...touched, [field]: true });
  };

  const isFormValid = email && password && !emailError && !passwordError;

  const handleLogin = async () => {
    try {
      const response = await axios.post("http://localhost:3000/auth/login", {
        email,
        password,
      });

      // 토큰을 로컬스토리지에 저장
      localStorage.setItem('accessToken', response.data.accessToken);
      localStorage.setItem('refreshToken', response.data.refreshToken);

      // 메인 페이지로 이동
      window.location.href = '/';
    } catch (error) {
      console.error('로그인 실패:', error);
    }
  };

  return (
    <LoginContainer>
      <h2>로그인 페이지</h2>
      <Input
        type="email"
        placeholder="이메일"
        value={email}
        onChange={handleEmailChange}
        onBlur={() => handleBlur('email')}
        $error={touched.email && emailError}
      />
      {touched.email && emailError && <ErrorMessage>{emailError}</ErrorMessage>}
      <Input
        type="password"
        placeholder="비밀번호"
        value={password}
        onChange={handlePasswordChange}
        onBlur={() => handleBlur('password')}
        $error={touched.password && passwordError}
      />
      {touched.password && passwordError && <ErrorMessage>{passwordError}</ErrorMessage>}
      <LoginButton disabled={!isFormValid} onClick={handleLogin}>
        로그인
      </LoginButton>
    </LoginContainer>
  );
};

export default LoginPage;

파일 이름: ./pages/MovieDetail.jsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import styled from 'styled-components';
import MovieCard from '../components/MovieCard';

// 스타일 정의
const Container = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  color: #fff;
`;

const Header = styled.div`
  display: flex;
  gap: 20px;
`;

const Info = styled.div`
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  max-width: calc(100% - 320px);
`;

const Title = styled.h2`
  font-size: 2rem;
  margin: 0;
`;

const Overview = styled.p`
  margin-top: 10px;
  font-size: 1rem;
  line-height: 1.5;
`;

const Credits = styled.div`
  margin-top: 20px;
`;

// MovieDetail 컴포넌트 정의
const MovieDetail = () => {
  const { movieId } = useParams(); // URL에서 movieId 추출
  const [movie, setMovie] = useState(null);
  const [credits, setCredits] = useState(null);

  useEffect(() => {
    // 영화 상세 정보 요청
    const fetchMovieDetails = async () => {
      try {
        const movieResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}`, {
          params: { api_key: 'de78f3589204f34063fb666ed535b7ca', language: 'ko-KR' },
        });
        setMovie(movieResponse.data);

        // 영화 크레딧 정보 요청
        const creditsResponse = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits`, {
          params: { api_key: 'de78f3589204f34063fb666ed535b7ca', language: 'ko-KR' },
        });
        setCredits(creditsResponse.data);
      } catch (error) {
        console.error(error);
      }
    };

    fetchMovieDetails();
  }, [movieId]);

  if (!movie || !credits) return <p>Loading...</p>;

  return (
    <Container>
      <Header>
      <MovieCard
          id={movie.id}
          title={movie.title}
          releaseDate={movie.release_date}
          posterPath={movie.poster_path}
        />
        <Info>
          <Title>{movie.title}</Title>
          <p>개봉일: {movie.release_date}</p>
          <p>평점: {movie.vote_average}</p>
          <Overview>{movie.overview}</Overview>
        </Info>
      </Header>
      <Credits>
        <h3>감독 및 출연진</h3>
        <ul>
          {credits.crew
            .filter(member => member.job === 'Director')
            .map(director => (
              <li key={director.id}>감독: {director.name}</li>
            ))}
          {credits.cast.slice(0, 5).map(actor => (
            <li key={actor.id}>출연: {actor.name} - {actor.character}</li>
          ))}
        </ul>
      </Credits>
    </Container>
  );
};

export default MovieDetail;
파일 이름: ./pages/NowPlaying.jsx
import React from 'react';
import useFetchMovies from '../hooks/useFetchMovies';
import MovieListPage from '../components/MovieListPage';

const NowPlaying = () => {
  const movies = useFetchMovies('now_playing');
  console.log("Movies data in NowPlaying:", movies); 
  return <MovieListPage title="현재 상영중인 영화" movies={movies} />;
};

export default NowPlaying;
파일 이름: ./pages/Popular.jsx
import React from 'react';
import useFetchMovies from '../hooks/useFetchMovies';
import MovieListPage from '../components/MovieListPage';

const Popular = () => {
  const movies = useFetchMovies('popular');
  return <MovieListPage title="인기 영화" movies={movies} />;
};

export default Popular;

파일 이름: ./pages/SearchMovieList.jsx
import * as S from "./SearchPage.style.js";
import useCustomFetch from "../hooks/useCustomFetch.js";
import MovieCard from "../components/MovieCard.jsx";
import { useSearchParams } from "react-router-dom";
import MovieCardListSkeleton from "../components/MovieCardListSkeleton.jsx";

const SearchMovieList = () => {
  const [searchParams, setSearchParams] = useSearchParams({ mq: "" });
  const mq = searchParams.get("mq");
  const url = `/search/movie?query=${mq}&include_adult=false&language=ko-KR&page=1`;
  const { data: movies, isLoading, isError } = useCustomFetch(url);

  if (isError) {
    return <h2 style={{color: 'white'}}>에러 발생</h2>
  }

  if (isLoading) {
    return (
        <S.MovieGridContainer>
            <MovieCardListSkeleton number={20}/>
        </S.MovieGridContainer>
    )
  }

  if (mq && movies.length === 0) {
    return (
      <div style={{ textAlign: "center", marginTop: "30px" }}>
        <h2 style={{ color: "white" }}>검색어 {mq}에</h2>
        <h2 style={{ color: "white" }}>해당하는 데이터가 없습니다.</h2>
      </div>
    );
  }

  console.log(movies);
  return (
    <S.MovieGridContainer>
      {movies.length > 0 &&
        movies.map((movie) => (
          <MovieCard
            key={movie.id}
            id={movie.id}
            title={movie.title}
            releaseDate={movie.release_date}
            posterPath={movie.poster_path}
          />
        ))}
    </S.MovieGridContainer>
  );
};

export default SearchMovieList;

파일 이름: ./pages/SearchPage.jsx
import * as S from "./SearchPage.style.js";
import { useState, useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import useCustomFetch from "../hooks/useCustomFetch.js";
import MovieCard from '../components/MovieCard';
import SearchMovieList from "./SearchMovieList.jsx";
import { debounce } from 'lodash';

const SearchPage = () => {
  const [searchValue, setSearchValue] = useState('');
  const navigate = useNavigate();
  const [searchParams] = useSearchParams({ mq: '' });
  const mq = searchParams.get('mq');

  // Debounced function for handling search navigation
  const debouncedSearch = debounce((value) => {
    if (mq !== value) {
      navigate(`/search?mq=${value}`);
    }
  }, 300); // 300ms delay for debounce

  const onChangeSearchValue = (event) => {
    setSearchValue(event.target.value);
    debouncedSearch(event.target.value); // Run debounced search
  };

  const handleSearchMovieWithKeyboard = (e) => {
    if (e.key === 'Enter') {
      debouncedSearch(searchValue); // Run debounced search on Enter key
    }
  };

  const url = `/search/movie?query=${searchValue}&include_adult=false&language=ko-KR&page=1`;
  const { data: movies, isLoading, isError } = useCustomFetch(url);

  useEffect(() => {
    return () => {
      debouncedSearch.cancel(); // Cancel debounced calls on unmount
    };
  }, [debouncedSearch]);

  return (
    <>
      <S.SearchContainer>
        <input
          placeholder="영화 제목을 입력해주세요"
          value={searchValue}
          onChange={onChangeSearchValue}
          onKeyDown={handleSearchMovieWithKeyboard}
        />
        <button onClick={() => debouncedSearch(searchValue)}>검색</button>
      </S.SearchContainer>
      <SearchMovieList />
    </>
  );
};

export default SearchPage;


// import * as S from "./SearchPage.style.js";
// import { useState } from "react";
// import { useNavigate, useSearchParams } from "react-router-dom";
// import useCustomFetch from "../hooks/useCustomFetch.js";
// import MovieCard from '../components/MovieCard';
// import SearchMovieList from "./SearchMovieList.jsx";

// const SearchPage = () => {
//   const [searchValue, setSearchValue] = useState('');
//   const navigate = useNavigate();
//   const [searchParams] = useSearchParams({ mq: '' });

//   const mq = searchParams.get('mq');

//   const onChangeSearchValue = (event) => {
//     setSearchValue(event.target.value);
//   };

//   const handleSearchMovie = () => {
//     if (mq === searchValue) return;
//     navigate(`/search?mq=${searchValue}`);
//   };

//   const handleSearchMovieWithKeyboard = (e) => {
//     if (e.key === 'Enter') {
//       handleSearchMovie();
//     }
//   };

//   const url = `/search/movie?query=${searchValue}&include_adult=false&language=ko-KR&page=1`;
//   const { data: movies, isLoading, isError } = useCustomFetch(url);

//   return (
//     <>
//       <S.SearchContainer>
//         <input
//           placeholder="영화 제목을 입력해주세요"
//           value={searchValue}
//           onChange={onChangeSearchValue}
//           onKeyDown={handleSearchMovieWithKeyboard}
//         />
//         <button onClick={handleSearchMovie}>검색</button>
//       </S.SearchContainer>
//       <SearchMovieList/>
//     </>
//   );
// };

// export default SearchPage;

파일 이름: ./pages/SearchPage.style.js
import styled from "styled-components";

const SearchContainer = styled.div`
  display: flex;
  justify-content: center;

  input {
    flex: 1;
    padding: 15px;
    border-top-left-radius: 5px;
    border-bottom-left-radius: 5px;
    border: 1px solid rgb(220, 220, 220);
  }

  button {
    width: 80px;
    background-color: #ff007f;
    color: white;
    cursor: pointer;
    border-top-right-radius: 5px;
    border-bottom-right-radius: 5px;
  }
`;

const MovieGridContainer = styled.div`
  margin-top: 30px;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(168px, 1fr));
  gap: 20px;
  padding: 1rem;
  width: 100%; // MovieGrid가 부모 요소 너비를 꽉 채우도록 설정
  box-sizing: border-box;
`;
export { SearchContainer, MovieGridContainer };

파일 이름: ./pages/SignupPage.jsx
import React from 'react';
import { useForm } from 'react-hook-form';
import { useNavigate } from 'react-router-dom';
import * as yup from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';
import styled from 'styled-components';
import axios from 'axios';

const schema = yup.object().shape({
  email: yup.string().email('유효한 이메일 형식이어야 합니다.').required('이메일은 필수 입력 항목입니다.'),
  password: yup
    .string()
    .min(8, '비밀번호는 8자 이상이어야 합니다.')
    .max(16, '비밀번호는 16자 이하여야 합니다.')
    .required('비밀번호는 필수 입력 항목입니다.'),
  passwordCheck: yup
    .string()
    .oneOf([yup.ref('password'), null], '비밀번호가 일치하지 않습니다.')
    .required('비밀번호 확인은 필수 입력 항목입니다.')
});

const SignupPage = () => {
  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(schema)
  });
  
  const navigate = useNavigate();

  const onSubmit = async (data) => {
    try {
      // 회원가입 요청을 보내는 axios POST 요청
      await axios.post("http://localhost:3000/auth/register", {
        email: data.email,
        password: data.password,
        passwordCheck: data.passwordCheck
      });
      // 회원가입 성공 시 로그인 페이지로 이동
      navigate('/login');
    } catch (error) {
      console.error('회원가입 실패:', error);
    }
  };

  return (
    <Container>
      <h2>회원가입</h2>
      <Form onSubmit={handleSubmit(onSubmit)}>
        <Input
          type="email"
          placeholder="이메일을 입력해주세요"
          {...register('email')}
        />
        {errors.email && <ErrorText>{errors.email.message}</ErrorText>}
        
        <Input
          type="password"
          placeholder="비밀번호를 입력해주세요"
          {...register('password')}
        />
        {errors.password && <ErrorText>{errors.password.message}</ErrorText>}
        
        <Input
          type="password"
          placeholder="비밀번호 확인을 입력해주세요"
          {...register('passwordCheck')}
        />
        {errors.passwordCheck && <ErrorText>{errors.passwordCheck.message}</ErrorText>}
        
        <SubmitButton type="submit">회원가입</SubmitButton>
      </Form>
    </Container>
  );
};

export default SignupPage;

const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-top: 50px;
`;

const Form = styled.form`
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 300px;
`;

const Input = styled.input`
  margin: 10px 0;
  padding: 10px;
  width: 100%;
  border: 1px solid #ccc;
  border-radius: 4px;
`;

const ErrorText = styled.div`
  color: red;
  font-size: 0.8rem;
  margin-bottom: 5px;
`;

const SubmitButton = styled.button`
  padding: 10px;
  width: 100%;
  background-color: #ff007f;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  &:disabled {
    background-color: gray;
    cursor: not-allowed;
  }
`;

파일 이름: ./pages/TopRated.jsx
import React from 'react';
import useFetchMovies from '../hooks/useFetchMovies';
import MovieListPage from '../components/MovieListPage';

const TopRated = () => {
  const movies = useFetchMovies('top_rated');
  return <MovieListPage title="높은 평가를 받은 영화" movies={movies} />;
};

export default TopRated;

파일 이름: ./pages/Upcoming.jsx
import React from 'react';
import useFetchMovies from '../hooks/useFetchMovies';
import MovieListPage from '../components/MovieListPage';

const Upcoming = () => {
  const movies = useFetchMovies('upcoming');
  return <MovieListPage title="개봉 예정 영화" movies={movies} />;
};

export default Upcoming;

파일 이름: ./services/authService.js
import api from '../apis/axiosInstance';

// 토큰 재발급 함수
export const refreshAccessToken = async () => {
  try {
    const refreshToken = localStorage.getItem('refreshToken');
    const response = await api.post("/auth/token/access", {}, {
      headers: { Authorization: `Bearer ${refreshToken}` }
    });
    localStorage.setItem('accessToken', response.data.accessToken);
    return response.data.accessToken;
  } catch (error) {
    console.error('토큰 재발급 실패:', error);
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    window.location.href = '/login';
    throw error;
  }
};

// 유저 정보 불러오기 함수
export const fetchUserInfo = async () => {
  try {
    const response = await api.get("/user/me");
    return response.data;
  } catch (error) {
    console.error('유저 정보 불러오기 실패:', error);
    throw error;
  }
};

파일 이름: ./utils/validate.js
const emailPattern = /^[A-Za-z0-9_\.\-]+@[A-Za-z0-9\-]+\.[A-za-z0-9\-]+/;

// values: {email: 'saeumjung33@gmail.com', password: '123456'}
function validateUser(values) {
    const errors = {
        email: '',
        password: '',
    }

    if (emailPattern.test(values.email) === false) {
        errors.email = '올바른 이메일 형식이 아닙니다. 다시 확인해주세요!'
    }

    if (values.password.length < 8 || values.password.length > 16) {
        errors.password = '비밀번호는 8 ~ 16자 사이로 입력해주세요!'
    }

    return errors;
}

function validateLogin(values) {
    return validateUser(values);
}

export {validateLogin}
