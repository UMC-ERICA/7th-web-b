파일 이름: ./apis/axiosInstance.js
import axios from "axios";

const axiosInstance = axios.create({
    baseURL: "http://localhost:3000",
});

export default axiosInstance;

파일 이름: ./apis/todo.js
import axiosInstance from "./axiosInstance";

// TODO: TODO 생성
const postTodo = async ({ title, content, checked = false }) => {
    const { data } = await axiosInstance.post("/todo", {
        title, // title: title, 키값과 밸류 값이 같으면 생략 가능
        content, // content: content,
        checked, //checked: checked,
    });
    
    return data;
};

// TODO: TODO List 가져오기(title)
const getTodoList = async ({ title }) => {
    let url = "/todo";

    if (title) {
        url += `?title=${title}`;
    }

    const { data } = await axiosInstance.get(url);
    
    return data;
};

// TODO: TODO 단건 가져오기
const getTodo = async ({ id }) => {
    const { data } = await axiosInstance.get(`/todo/${id}`);
    
    return data;
};

// TODO: TODO 수정하기
const patchTodo = async ({ id, title, content, checked }) => {
    const { data } = await axiosInstance.patch(`/todo/${id}`, {
        title,
        content,
        checked,
    });
    
    return data;
};

// TODO: TODO 삭제하기
const deleteTodo = async ({ id }) => {
    const { data } = await axiosInstance.delete(`/todo/${id}`);
    
    return data;
};

export { postTodo, getTodoList, getTodo, patchTodo, deleteTodo };
파일 이름: ./App.css
/* body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh; // 전체 화면 높이를 사용해서 가운데 정렬
    margin: 0;
}

.todo-list {
    padding: 20px;
    width: 300px; // 너비를 고정하여 중앙 배치 효과
}

.todo-item {
    display: flex;
    gap: 20px;
    align-items: center;
    padding: 10px 0;
    border-bottom: 1px solid #ddd;
}

.todo-text {
    display: flex;
    gap: 5px;
}

form {
    display: flex;
    align-items: center;
    gap: 10px;
}

input.input {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    flex-grow: 1; // 입력 필드가 가능한 공간을 채우도록
}

button.btn {
    padding: 8px 16px;
    background-color: #484848;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    white-space: nowrap; // 버튼 텍스트가 줄바꿈되지 않도록
}

button.btn:hover {
    background-color: #0056b3;
} */

파일 이름: ./App.jsx
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import TodoPage from "./pages/TodoPage";
import TodoDetailPage from "./pages/TodoDetailPage"; // 단일 Todo 상세 페이지

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<TodoPage />} />
        <Route path="/todo/:id" element={<TodoDetailPage />} />
      </Routes>
    </Router>
  );
}

export default App;

파일 이름: ./assets/react.svg
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
파일 이름: ./components/TodoForm.jsx
import React, { useState } from "react";
import styled from "styled-components";

const TodoForm = ({ onSubmit }) => {
  const [formData, setFormData] = useState({ title: "", content: "" });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!formData.title.trim() || !formData.content.trim()) {
      alert("Title and content are required!");
      return;
    }
    onSubmit(formData);
    setFormData({ title: "", content: "" });
  };

  return (
    <StyledForm onSubmit={handleSubmit}>
      <Input
        type="text"
        name="title"
        value={formData.title}
        placeholder="Enter title"
        onChange={handleChange}
      />
      <Textarea
        name="content"
        value={formData.content}
        placeholder="Enter content"
        onChange={handleChange}
      />
      <Button type="submit">Add Todo</Button>
    </StyledForm>
  );
};

export default TodoForm;

const StyledForm = styled.form`
  display: flex;
  flex-direction: column;
  gap: 15px;
  padding: 20px;
  background: #ffffff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
`;

const Input = styled.input`
  padding: 12px 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;

  &:focus {
    border-color: #6200ea;
    outline: none;
    box-shadow: 0 0 5px rgba(98, 0, 234, 0.5);
  }
`;

const Textarea = styled.textarea`
  padding: 12px 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
  resize: none;

  &:focus {
    border-color: #6200ea;
    outline: none;
    box-shadow: 0 0 5px rgba(98, 0, 234, 0.5);
  }
`;

const Button = styled.button`
  padding: 10px 15px;
  font-size: 16px;
  font-weight: bold;
  background: #6200ea;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;

  &:hover {
    background: #3700b3;
  }

  &:active {
    background: #1c0067;
  }
`;

파일 이름: ./components/TodoList.jsx
import React from "react";
import styled from "styled-components";

const TodoList = ({ todos, onDelete, onToggle }) => {
  if (!todos || todos.length === 0) return <p>No todos available!</p>;

  return (
    <StyledList>
      {todos.map((todo) => (
        <TodoItem key={todo.id}>
          <Checkbox>
            <input
              type="checkbox"
              checked={todo.checked}
              onChange={() => onToggle(todo.id, !todo.checked)}
            />
            <span>{todo.checked ? "Completed" : "Not Completed"}</span>
          </Checkbox>
          <Details>
            <h3>{todo.title}</h3>
            <p>{todo.content}</p>
          </Details>
          <Actions>
            <button onClick={() => onDelete(todo.id)}>Delete</button>
          </Actions>
        </TodoItem>
      ))}
    </StyledList>
  );
};

export default TodoList;

const StyledList = styled.ul`
  list-style: none;
  padding: 0;
  margin: 20px 0;
`;

const TodoItem = styled.li`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 16px;
  background: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 10px;
`;

const Checkbox = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;

  input[type="checkbox"] {
    width: 18px;
    height: 18px;
  }

  span {
    font-size: 14px;
    color: #555;
  }
`;

const Details = styled.div`
  flex-grow: 1;
  margin-left: 20px;

  h3 {
    margin: 0 0 5px 0;
    font-size: 18px;
  }

  p {
    margin: 0;
    color: #777;
    font-size: 14px;
  }
`;

const Actions = styled.div`
  button {
    padding: 8px 12px;
    font-size: 14px;
    background: #d32f2f;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;

    &:hover {
      background: #b71c1c;
    }

    &:active {
      background: #7f0000;
    }
  }
`;

파일 이름: ./hooks/useFetchTodos.js
import { useState, useEffect } from "react";
import axios from "axios";

const BASE_URL = "http://localhost:3000/todo";

export const useFetchTodos = (searchQuery = "") => {
  const [todos, setTodos] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchTodos = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await axios.get(BASE_URL, {
          params: { title: searchQuery },
        });
        setTodos(response.data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    const debounceFetch = setTimeout(fetchTodos, 500); // Debounce 적용
    return () => clearTimeout(debounceFetch);
  }, [searchQuery]);

  return { todos, loading, error };
};

파일 이름: ./index.css
* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

/* :root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255a, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
} */

파일 이름: ./main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false, // 선택적: 포커스 시 재요청 방지
    },
    mutations: {
      // Mutation 옵션을 명확히 지정
      retry: false,
    },
  },
});

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  </React.StrictMode>
);


// import { StrictMode } from 'react'
// import { createRoot } from 'react-dom/client'
// import App from './App.jsx'
// import './index.css'
// import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
// import { ReactQueryDevtools } from "@tanstack/react-query-devtools";

// export const queryClient = new QueryClient();

// createRoot(document.getElementById('root')).render(
//     <StrictMode>
//         <QueryClientProvider client={queryClient}>
//             <App />
//             <ReactQueryDevtools initialIsOpen={false} />
//         </QueryClientProvider>
//     </StrictMode>
// );

파일 이름: ./pages/TodoDetailPage.jsx
import React, { useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useQuery, useMutation } from "@tanstack/react-query";
import { getTodo, patchTodo, deleteTodo } from "../apis/todo";
import styled from "styled-components";

const TodoDetailPage = () => {
  const { id } = useParams(); // URL에서 id 추출
  const navigate = useNavigate(); // 페이지 이동을 위한 hook
  const [editMode, setEditMode] = useState(false);
  const [formData, setFormData] = useState({
    title: "",
    content: "",
    checked: false,
  });

  // Fetch single Todo
  const { data: todo, isLoading, error } = useQuery({
    queryKey: ["todo", id],
    queryFn: () => getTodo({ id }),
    onSuccess: (data) => {
      setFormData({
        title: data.title,
        content: data.content,
        checked: data.checked,
      });
    },
  });

  // Update Todo
  const { mutate: updateTodo } = useMutation(patchTodo, {
    onSuccess: () => {
      alert("Todo updated successfully!");
      setEditMode(false);
    },
    onError: () => {
      alert("Failed to update Todo.");
    },
  });

  // Delete Todo
  const { mutate: removeTodo } = useMutation(deleteTodo, {
    onSuccess: () => {
      alert("Todo deleted successfully!");
      navigate("/"); // Redirect to the main page after deletion
    },
    onError: () => {
      alert("Failed to delete Todo.");
    },
  });

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSave = () => {
    updateTodo({ id, ...formData });
  };

  if (isLoading) return <p>Loading...</p>;
  if (error) return <p>Error: {error.message}</p>;

  return (
    <Container>
      <h1>Todo Detail</h1>
      {editMode ? (
        <>
          <Input
            name="title"
            value={formData.title}
            onChange={handleChange}
            placeholder="Edit title"
          />
          <Textarea
            name="content"
            value={formData.content}
            onChange={handleChange}
            placeholder="Edit content"
          />
          <Checkbox>
            <input
              type="checkbox"
              name="checked"
              checked={formData.checked}
              onChange={handleChange}
            />
            Mark as Completed
          </Checkbox>
          <Button onClick={handleSave}>Save</Button>
          <Button onClick={() => setEditMode(false)}>Cancel</Button>
        </>
      ) : (
        <>
          <h2>{todo.title}</h2>
          <p>{todo.content}</p>
          <Checkbox>
            <input
              type="checkbox"
              disabled
              checked={todo.checked}
            />
            {todo.checked ? "Completed" : "Not Completed"}
          </Checkbox>
          <Button onClick={() => setEditMode(true)}>Edit</Button>
          <Button onClick={() => removeTodo({ id })}>Delete</Button>
        </>
      )}
    </Container>
  );
};

export default TodoDetailPage;

const Container = styled.div`
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  background: #f9f9f9;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
`;

const Input = styled.input`
  display: block;
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 5px;
`;

const Textarea = styled.textarea`
  display: block;
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 5px;
`;

const Checkbox = styled.label`
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 20px;
`;

const Button = styled.button`
  padding: 10px 20px;
  font-size: 16px;
  color: #fff;
  background: #6200ea;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin-right: 10px;

  &:hover {
    background: #3700b3;
  }

  &:active {
    background: #1c0067;
  }
`;

파일 이름: ./pages/TodoPage.jsx
import React, { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { postTodo, patchTodo, deleteTodo } from "../apis/todo";
import { useFetchTodos } from "../hooks/useFetchTodos";
import TodoList from "../components/TodoList";
import TodoForm from "../components/TodoForm";

const TodoPage = () => {
  const [search, setSearch] = useState(""); // 검색 상태 관리
  const { todos, loading, error } = useFetchTodos(search); // Custom Hook으로 데이터 가져오기

  const { mutate: addTodo } = useMutation(postTodo, {
    onSuccess: () => setSearch(""), // 성공 시 검색 초기화
  });

  const { mutate: toggleTodo } = useMutation(patchTodo, {
    onSuccess: () => setSearch(search), // 성공 시 기존 검색 유지
  });

  const { mutate: removeTodo } = useMutation(deleteTodo, {
    onSuccess: () => setSearch(search), // 성공 시 기존 검색 유지
  });

  return (
    <div>
      <h1>Todo List</h1>
      <input
        type="text"
        placeholder="Search by title"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      {error && <p style={{ color: "red" }}>{error}</p>}
      {loading ? (
        <p>Loading...</p>
      ) : (
        <TodoList
          todos={todos}
          onDelete={(id) => removeTodo({ id })}
          onToggle={(id, checked) => toggleTodo({ id, checked })}
        />
      )}
      <TodoForm onSubmit={(data) => addTodo(data)} />
    </div>
  );
};

export default TodoPage;

